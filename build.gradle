apply plugin: 'com.android.library'

android {
    compileSdkVersion 26
    buildToolsVersion "27.0.3"


    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //    androidTestCompile ('com.android.support.test:runner:2.2')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:0.5'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

task makeReleaseJar(type: Jar, dependsOn: build) {
    archiveName "SEHttpHelper.jar"
    from(project.buildDir.absolutePath + "/intermediates/classes/release/")
}

task exportJavadoc(type: Javadoc, dependsOn: makeReleaseJar) {
    title = 'SEHttpHelper API'
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options.links('http://docs.oracle.com/javase/7/docs/api/')
    options.links('http://d.android.com/reference/')
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    options.locale = 'en_US'
    options.memberLevel = JavadocMemberLevel.PUBLIC
    include 'com/seagle/net/android/com.seagle.net.android.httphelper/**'
    exclude '**/BuildConfig.java'
    failOnError false

    doFirst {
        println "Begin export java doc success"
    }

    doLast {
        println "Export java doc success"
    }
}

/**
 * 输出Javadoc的jar文件
 */
task exportJavadocJar(type: Jar, dependsOn: exportJavadoc) {
    classifier = 'javadoc'
    from exportJavadoc.destinationDir

    doFirst {
        println "Begin export java doc jar"
    }

    doLast {
        println "Export java doc jar success"
    }
}

task packageUp(dependsOn: exportJavadocJar) {

}
